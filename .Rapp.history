ROCPerf<-performance(ROCPred,"perc","rec")
ROCPerf<-performance(ROCPred,measure="perc")
ROCPerf<-performance(ROCPred,measure="lift")
ROCPerf<-performance(ROCPred,measure="perc")
ROCPerf<-performance(ROCPred,measure="prec")
ROCPerf<-performance(ROCPred,measure="prec", x.measure="rec")
plot(ROCPerf, col=rainbow(10))
ROCPerf<-performance(ROCPred,measure="prec")
plot(ROCPerf, col=rainbow(10))
ROCPerf<-performance(ROCPred,measure="auc")
plot(ROCPerf, col=rainbow(10))
ROCPerf<-performance(ROCPred,measure="auc",fpr.stop=1)
plot(ROCPerf, col=rainbow(10))
ROCPerf<-performance(ROCPred,measure="auc",fpr.stop=0.9)
plot(ROCPerf, col=rainbow(10))
ROCPerf<-performance(ROCPred,measure="lift",x.measure="rpp")
plot(ROCPerf, col=rainbow(10))
ROCPerf<-performance(ROCPred,"auc")
plot(ROCPerf)
colAUC(testing$predVal,testing$IsBadBuy,plotROC=TRUE)
colAUC(testing$predVal,testing$IsBadBuy,plotROC=FALSE)
save.image()
install.packages("randomForest")
library(randomForest)
summary(train_data)
install.packages("gbm")
library(gbm)
GBMModel <- gmb(IsBadBuy~.,distribution="bernoulli",data=train_data,)
GBMModel <- gbm(IsBadBuy~.,distribution="bernoulli",data=train_data,n.tress=100)
GBMModel <- gbm(IsBadBuy~.,distribution="bernoulli",data=train_data,n.trees=100)
GBMModel <- gbm(IsBadBuy~.,distribution=c("bernoulli","adaboost"),data=train_data,n.trees=100)
GBMModel <- gbm(IsBadBuy~.,distribution=c("adaboost"),data=train_data,n.trees=100)
GBMModel <- gbm(IsBadBuy~.,distribution=c("adaboost"),data=train_data,n.trees=1000)
GBMPredict <- predict(GBMModel,test_data,type="response")
GBMPredict <- predict(GBMModel,test_data,n.trees=500,single.tree=TRUE,type="response")
write.csv(GBMPredict,"GBMPrediction.csv",row.names=TRUE)
GBMPredict <- predict(GBMModel,test_data,n.trees=500,type="response")
write.csv(GBMPredict,"GBMPrediction.csv",row.names=TRUE)
GBMPredict <- predict(GBMModel,test_data,n.trees=1,type="response")
write.csv(GBMPredict,"GBMPrediction.csv",row.names=TRUE)
GBMModel <- gbm(IsBadBuy~.,distribution="huberized",data=train_data,n.trees=1000)
GBMModel <- gbm(IsBadBuy~.,distribution="huberized",keep.data=TRUE, shrinkage=0.05, bag.fraction =1,data=train_data,n.trees=1000)
write.csv(predict(GBMModel,test_data,type="response"),"GBMPrediction.csv",row.names=TRUE)
write.csv(predict(GBMModel,test_data,n.tress=100,type="response"),"GBMPrediction.csv",row.names=TRUE)
write.csv(predict(GBMModel,test_data,n.trews=100,type="response"),"GBMPrediction.csv",row.names=TRUE)
write.csv(predict(GBMModel,test_data,n.trees=100,type="response"),"GBMPrediction.csv",row.names=TRUE)
library(e1071)
NBModel <- naiveBayes(IsBadBuy~.,data=train_data)
write.csv(predict(NBModel,test_data,type="response"),"NBPrediction.csv",row.names=TRUE)
write.csv(predict(NBModel,test_data,type="raw"),"NBPrediction.csv",row.names=TRUE)
install.packages("RevoScaleR")
install.packages("party")
library(randomForest)
rfNews()
train_sub <- sample(train_data, n.rows(train_data)*0.2)
train_sub <- sample(n.rows(train_data), n.rows(train_data)*0.2)
train_sub <- sample(nrows(train_data), nrows(train_data)*0.2)
train_sub <- sample(nrow(train_data), nrow(train_data)*0.2)
print(nrow(train_sub))
summary(train_sub)
summary(train_data)
trai
train
train_sub <- train_data[60000,]
summary(train_sub)
train_sub <- train_data[,600]
library(rpart)
library(party)
TreeModel <- ctree(IsBadBuy~., data=train_data)
print(TreeModel)
TreeCon <- rpart.control(minbucket=40, maxdepth=30)
TreeModel <- ctree(IsBadBuy~., data=train_data, controls=TreeCon)
TreeCon <- ctree_control(minbucket=40)
TreeModel <- ctree(IsBadBuy~., data=train_data, controls=TreeCon)
print(TreeModel)
TreePred <- Predict(TreeModel,data=test_data,type="response")
summary(TreePred)
summary(test_data)
TreePred <- Predict(TreeModel,test_data,type="prob")
summary(TreePred)
print(TreePred)
TreePredFrame <- data.frame(matrix(unlist(TreePred)))
print(TreePredFrame)
TreePredFrame <- data.frame(matrix(unlist(TreePred), ncol=3)
)
TreePredFrame <- data.frame(matrix(unlist(TreePred), byrow=TRUE)
)
TreePredFrame <- data.frame(matrix(unlist(TreePred), byrow=TRUE))
print(TreePredFrame)
install.packaes("rbind")
install.packages("rbind")
install.packages("rbind", type="source")
install.packages("rbind", method="source")
library(rbind)
install.packages("rbind")
system.time(sin)
system.time(library(rbind))
system.time(sin)
system.time(sinI <- lapply(1:n,sin))
system.time(sinI <- lapply(1:3,sin))
system.time(sinI <- lapply(1:1,sin))
system.time(sinI <- lapply(1:30000000,sin))
system.time(sinI <- ctree(IsBadBuy~.,train_data))
print(examp<-lapply(1:4,TreePred))
examp<-lapply(1:4,TreePred)
examp<-lapply(TreePred,)
examp<-lapply(TreePred, FUN)
examp<-lapply(TreePred, print())
examp<-lapply(TreePred, print(TreePred))
for(i in 1:nrow(TreePredFrame)){}
for(i in 1:nrow(TreePredFrame)){
}
summary(TreePredFrame)
for(i in 1:nrow(TreePredFrame)){
TreePredFrame$1
write.csv(TreePredFrame,"TreePredFrame.csv",row.names=TRUE)
summary(training_orig)
summary(train_data)
install.packages("FSelector")
traing_orig = read.csv("/Users/kevin_fox/Documents/Spring 2013/Data Mining/DM Project/training.csv",header=TRUE)
train_orig=traing_orig
summary(train_orig)
train_orig$IsBadBuy = factor(train_orig$IsBadBuy)
train_orig$VNZIP1 = factor(train_orig$VNZIP1)
train_orig$IsOnlineSale = factor(train_orig$IsOnlineSale)
library(FSelector)
subset <- cfs(IsBadBuy~.,train_orig)
summary(subset)
print(subset)
f <- as.simple.formula(subset,"IsBadBuy")
print(f)
weights <- chi.squared(IsBadBuy~.,train_orig)
print(weights)
summary(train_data)
train_orig2 = read.csv("/Users/kevin_fox/Documents/Spring 2013/Data Mining/DM Project/training_edit2.csv")
summary(train_orig2)
train_orig2$IsBadBuy=factor(train_orig2$IsBadBuy)
train_orig2$VNZIP1=factor(train_orig2$VNZIP1)
weights2= chi.squared(IsBadBuy~.,train_orig2)
print(c(weights,weights2))
IG1 = information.gain(IsBadBuy~.,train_orig)
print(IG)
print(IG1)
summary(train_data)
logModTest = glm(IsBadBuy~.,data=train_data,family=binomial(link=logit))
print(logModTest)
summary(logModTest)
logModTest2 = glm(IsBadBuy~.,train_data,family=binomial(link=probit))
summary(logModTest2)
plot(logModTest)
confint(logModTest)
summary(logModTest)
summary(testing)
summary(ROCPerf)
plot(ROCPerf)
plot(ROCPerf, col=rainbow(10))
print(ROCPerf)
summary(test_data)
summary(train_data)
logMod2 <- glm(IsBadBuy~VehicleAge+WheelType+DifAquiredAvg_CurAvgAuction+DifAquiredAboveAvg_CurAboveAvgRetail+DifAquiredAvg_CurAvgRetail+ DifAquiredAboveAvg_CurAboveAvgAuction,family=binomial(link=probit),train_data)
write.csv("Pred1.csv",predict(logMod2,train_data,type="response"),row.names=TRUE)
write.csv(predict(logMod2,train_data,type="response"),"Pred1.csv",row.names=TRUE)
write.csv(predict(logMod2,test_data,type="response"),"Pred1.csv",row.names=TRUE)
library(ROCR)
testing$PredVal <- predict(logMod2,testing,type="response")
ROCPred <- prediction(testing$PredVal,testing$IsBadBuy)
ROCPerf <- performance(ROCPred, "tpr","fpr")
plot(ROCPerf)
ROCPerf <- performance(ROCPred, measure="auc")
print(ROCPerf)
logMod3 <- glm(glm(IsBadBuy~WheelType+DifAquiredAvg_CurAvgAuction+DifAquiredAboveAvg_CurAboveAvgRetail+DifAquiredAvg_CurAvgRetail+ DifAquiredAboveAvg_CurAboveAvgAuction+AdjVehOd,family=binomial(link=probit),train_data)
)
logMod3 <- glm(IsBadBuy~WheelType+DifAquiredAvg_CurAvgAuction+DifAquiredAboveAvg_CurAboveAvgRetail+DifAquiredAvg_CurAvgRetail+ DifAquiredAboveAvg_CurAboveAvgAuction+AdjVehOd,family=binomial(link=probit),train_data)
write.csv(predict(logMod3,test_data,type="response"),"Pred2.csv",row.names=TRUE)
testing$PredVal <- predict(logMod3,testing,type="response")
ROCPerf <- performance(prediction(testing$PredVal,testing$IsBadBuy), measure="auc")
print(ROCPerf)
logMod3 <- glm(IsBadBuy~VehicleAge+DifAquiredAvg_CurAvgAuction+DifAquiredAboveAvg_CurAboveAvgRetail+DifAquiredAvg_CurAvgRetail+ DifAquiredAboveAvg_CurAboveAvgAuction+AdjVehOd,family=binomial(link=probit),train_data)
write.csv(predict(logMod3,test_data,type="response"),"Pred3.csv",row.names=TRUE)
testing$PredVal <- predict(logMod3,testing,type="response")
ROCPerf <- performance(prediction(testing$PredVal,testing$IsBadBuy), measure="auc")
print(ROCPerf)
logMod3 <- glm(IsBadBuy~VehicleAge+WheelType+DifAquiredAboveAvg_CurAboveAvgRetail+DifAquiredAvg_CurAvgRetail+ DifAquiredAboveAvg_CurAboveAvgAuction+AdjVehOd,family=binomial(link=probit),train_data)
write.csv(predict(logMod3,test_data,type="response"),"Pred4.csv",row.names=TRUE)
testing$PredVal <- predict(logMod3,testing,type="response")
ROCPerf <- performance(prediction(testing$PredVal,testing$IsBadBuy), measure="auc")
print(ROCPerf)
logMod3 <- glm(IsBadBuy~VehicleAge+WheelType+DifAquiredAvg_CurAvgAuction+DifAquiredAvg_CurAvgRetail+ DifAquiredAboveAvg_CurAboveAvgAuction+AdjVehOd,family=binomial(link=probit),train_data)
write.csv(predict(logMod3,test_data,type="response"),"Pred4.csv",row.names=TRUE)
testing$PredVal <- predict(logMod3,testing,type="response")
ROCPerf <- performance(prediction(testing$PredVal,testing$IsBadBuy), measure="auc")
print(ROCPerf)
summary(NBModel)
library(e1071)
NBModel2 <- naiveBayes(IsBadBuy~.,data=train_data,laplace=1)
NBPred2 < predict(NBModel2,test_data,type="response")
NBPred2 <- predict(NBModel2,test_data,type="response")
NBPred2 <- predict(NBModel2,test_data,type="raw")
summary(NBPred2)
write.csv(NBPred2,"NBPred2.csv",row.names=TRUE)
summary(LogModTest)
summary(LogModTest2)
summary(LogmodTest2)
LogModTest <- glm(IsBadBuy~.,data=train_data,family=binomial(link=logit))
summary(train_data)
LogPredlogit <- predict(LogModTest,test_data,type="response")
write.csv(LogPredlogit,"LogPredTest.csv",row.names=TRUE)
library(logicFS)
install.packages("logicFOS")
install.packages("logicFS")
install.packages("logicFS", type="source")
library(logicFS)
library(boot)
library(e1071)
FSelector
summary(trainData)
setwd("~/Documents/Fall 2013/Practical Data Science/Project/")
trainData = read.csv("trainingClean.csv",header=TRUE,sep=",")
summary(trainData)
information.gain(formula=IsBadBuy ~ .,trainData)
trainData$IsBadBuy = factor(trainData$IsBadBuy)
trainData$IsOnlineSale = factor(trainData$IsOnlineSale)
summary(trainData)
trainData$RefId = NULL
summary(trainData)
trainData$WheelTypeID = factor(trainData$WheelTypeID)
summary(trainData)
IGWeights = information.gain(formula=IsBadBuy ~ .,trainData)
print(IGWeights)
LinCorWeights = linear.correlation(formula=IsBadBuy ~ .,trainData)
GRWeights = gain.ratio(formula=IsBadBuy ~ .,trainData)
print(GRWeights)
GRWeights[order(GRWeights$attr_importance),]
print(GRWeights)
order(GRWeights$attr_importance)
order(GRWeights$attr_importance,decreasing=TRUE)
GRWeightsUpdated = order(GRWeights$attr_importance,decreasing=TRUE)
print(GRWeightsUpdated)
GRWeightsUpdated = GRWeights[order(GRWeights$attr_importance,decreasing=TRUE),]
print(GRWeightsUpdated)
print(GRWeights)
GRWeights2 = data.frame(name=0,importance=attr_importance)
GRWeights2 = data.frame(name=0,importance=1)
print(GRWeights2)
GRWeightsUpdated = GRWeights[order(GRWeights$attr_importance,decreasing=TRUE), ,drop=FALSE]
print(GRWeightsUpdated)
GRWeights = GRWeights[order(GRWeights$attr_importance,decreasing=TRUE), ,drop=FALSE]
IGWeights = IGWeights[order(IGWeights$attr_importance,decreasing=TRUE), ,drop=FALSE]
print(IGWeights)
print(GRWeights)
